// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// DecryptedShare defines model for DecryptedShare.
type DecryptedShare struct {

	// The share from the current user
	Share *string `json:"share,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// NewSession defines model for NewSession.
type NewSession struct {

	// A first share owned by the dealer
	FirstShare string `json:"first_share"`

	// Seconds until the TOTP generation endpoint expires, starting from the first token generated.
	Ttl *int `json:"ttl,omitempty"`
}

// PrivateSession defines model for PrivateSession.
type PrivateSession struct {
	// Embedded struct due to allOf(#/components/schemas/Session)
	Session
	// Embedded struct due to allOf(#/components/schemas/SessionCredentials)
	SessionCredentials
}

// Session defines model for Session.
type Session struct {

	// True when the session either expired or the token was already retrieved by the dealer
	Closed *bool `json:"closed,omitempty"`

	// When the sessions will close down and no longer accept shares
	ClosesAt *time.Time `json:"closes_at,omitempty"`

	// True when enough shares have been provided
	Complete *bool `json:"complete,omitempty"`

	// The time when the session started
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// The public identifier of a session
	Id *string `json:"id,omitempty"`

	// The prefix to identify shares from different secrets
	ShareGroup *string `json:"share_group,omitempty"`

	// The total number of shares
	Shares *int `json:"shares,omitempty"`

	// The minimum number of shares required
	Threshold *int `json:"threshold,omitempty"`

	// Seconds until the TOTP generation endpoint expires, starting from the first token generated.
	Ttl *int `json:"ttl,omitempty"`
}

// SessionCredentials defines model for SessionCredentials.
type SessionCredentials struct {

	// The password to retrieve a TOTP from a session
	Private *string `json:"private,omitempty"`
}

// TOTPCode defines model for TOTPCode.
type TOTPCode struct {

	// The time when this endpoint will expire and cannot be called again
	EndpointExpiresAt *time.Time `json:"endpoint_expires_at,omitempty"`

	// The current TOTP
	Totp *string `json:"totp,omitempty"`

	// The time when the current TOTP will expire
	TotpExpiresAt *time.Time `json:"totp_expires_at,omitempty"`
}

// TOTPSecret defines model for TOTPSecret.
type TOTPSecret struct {

	// The keys to encrypt the shares, its length must be equal to `shares`
	EncryptionKeys *[]struct {
		From *string `json:"from,omitempty"`

		// Address to retrieve the public key
		Search *string `json:"search,omitempty"`
	} `json:"encryption_keys,omitempty"`

	// The number of shares to create
	Shares int `json:"shares"`

	// The minimum number of shares required to generate the TOTP
	Threshold int `json:"threshold"`

	// The secret key to generate the TOTP, either as a path or just the Base32 secret
	TotpSecretKey string `json:"totp_secret_key"`
}

// TOTPShares defines model for TOTPShares.
type TOTPShares struct {
	Shares []UserShare `json:"shares"`
}

// UserShare defines model for UserShare.
type UserShare struct {

	// The possibly encrypted share for this user
	Share string `json:"share"`

	// The user this share belongs to
	User *string `json:"user,omitempty"`
}

// DefaultError defines model for DefaultError.
type DefaultError Error

// CreateSessionJSONBody defines parameters for CreateSession.
type CreateSessionJSONBody NewSession

// PostShareJSONBody defines parameters for PostShare.
type PostShareJSONBody DecryptedShare

// GenerateTotpJSONBody defines parameters for GenerateTotp.
type GenerateTotpJSONBody SessionCredentials

// CreateSharesJSONBody defines parameters for CreateShares.
type CreateSharesJSONBody TOTPSecret

// CreateSessionRequestBody defines body for CreateSession for application/json ContentType.
type CreateSessionJSONRequestBody CreateSessionJSONBody

// PostShareRequestBody defines body for PostShare for application/json ContentType.
type PostShareJSONRequestBody PostShareJSONBody

// GenerateTotpRequestBody defines body for GenerateTotp for application/json ContentType.
type GenerateTotpJSONRequestBody GenerateTotpJSONBody

// CreateSharesRequestBody defines body for CreateShares for application/json ContentType.
type CreateSharesJSONRequestBody CreateSharesJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateSession request  with any body
	CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateSession(ctx context.Context, body CreateSessionJSONRequestBody) (*http.Response, error)

	// GetSession request
	GetSession(ctx context.Context, id string) (*http.Response, error)

	// PostShare request  with any body
	PostShareWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	PostShare(ctx context.Context, id string, body PostShareJSONRequestBody) (*http.Response, error)

	// GenerateTotp request  with any body
	GenerateTotpWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error)

	GenerateTotp(ctx context.Context, id string, body GenerateTotpJSONRequestBody) (*http.Response, error)

	// CreateShares request  with any body
	CreateSharesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateShares(ctx context.Context, body CreateSharesJSONRequestBody) (*http.Response, error)
}

func (c *Client) CreateSessionWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSessionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSession(ctx context.Context, body CreateSessionJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSessionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetSession(ctx context.Context, id string) (*http.Response, error) {
	req, err := NewGetSessionRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostShareWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostShareRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostShare(ctx context.Context, id string, body PostShareJSONRequestBody) (*http.Response, error) {
	req, err := NewPostShareRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateTotpWithBody(ctx context.Context, id string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewGenerateTotpRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GenerateTotp(ctx context.Context, id string, body GenerateTotpJSONRequestBody) (*http.Response, error) {
	req, err := NewGenerateTotpRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSharesWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateSharesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateShares(ctx context.Context, body CreateSharesJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateSharesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewCreateSessionRequest calls the generic CreateSession builder with application/json body
func NewCreateSessionRequest(server string, body CreateSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSessionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSessionRequestWithBody generates requests for CreateSession with any type of body
func NewCreateSessionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sessions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetSessionRequest generates requests for GetSession
func NewGetSessionRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sessions/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostShareRequest calls the generic PostShare builder with application/json body
func NewPostShareRequest(server string, id string, body PostShareJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostShareRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostShareRequestWithBody generates requests for PostShare with any type of body
func NewPostShareRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sessions/%s/shares", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGenerateTotpRequest calls the generic GenerateTotp builder with application/json body
func NewGenerateTotpRequest(server string, id string, body GenerateTotpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGenerateTotpRequestWithBody(server, id, "application/json", bodyReader)
}

// NewGenerateTotpRequestWithBody generates requests for GenerateTotp with any type of body
func NewGenerateTotpRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "id", id)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/sessions/%s/totp", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewCreateSharesRequest calls the generic CreateShares builder with application/json body
func NewCreateSharesRequest(server string, body CreateSharesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSharesRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSharesRequestWithBody generates requests for CreateShares with any type of body
func NewCreateSharesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/shares")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateSession request  with any body
	CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSessionResponse, error)

	CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody) (*CreateSessionResponse, error)

	// GetSession request
	GetSessionWithResponse(ctx context.Context, id string) (*GetSessionResponse, error)

	// PostShare request  with any body
	PostShareWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostShareResponse, error)

	PostShareWithResponse(ctx context.Context, id string, body PostShareJSONRequestBody) (*PostShareResponse, error)

	// GenerateTotp request  with any body
	GenerateTotpWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*GenerateTotpResponse, error)

	GenerateTotpWithResponse(ctx context.Context, id string, body GenerateTotpJSONRequestBody) (*GenerateTotpResponse, error)

	// CreateShares request  with any body
	CreateSharesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSharesResponse, error)

	CreateSharesWithResponse(ctx context.Context, body CreateSharesJSONRequestBody) (*CreateSharesResponse, error)
}

type CreateSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrivateSession
}

// Status returns HTTPResponse.Status
func (r CreateSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Session
}

// Status returns HTTPResponse.Status
func (r GetSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostShareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostShareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostShareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GenerateTotpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TOTPCode
}

// Status returns HTTPResponse.Status
func (r GenerateTotpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GenerateTotpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSharesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TOTPShares
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r CreateSharesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSharesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateSessionWithBodyWithResponse request with arbitrary body returning *CreateSessionResponse
func (c *ClientWithResponses) CreateSessionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSessionWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

func (c *ClientWithResponses) CreateSessionWithResponse(ctx context.Context, body CreateSessionJSONRequestBody) (*CreateSessionResponse, error) {
	rsp, err := c.CreateSession(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSessionResponse(rsp)
}

// GetSessionWithResponse request returning *GetSessionResponse
func (c *ClientWithResponses) GetSessionWithResponse(ctx context.Context, id string) (*GetSessionResponse, error) {
	rsp, err := c.GetSession(ctx, id)
	if err != nil {
		return nil, err
	}
	return ParseGetSessionResponse(rsp)
}

// PostShareWithBodyWithResponse request with arbitrary body returning *PostShareResponse
func (c *ClientWithResponses) PostShareWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*PostShareResponse, error) {
	rsp, err := c.PostShareWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostShareResponse(rsp)
}

func (c *ClientWithResponses) PostShareWithResponse(ctx context.Context, id string, body PostShareJSONRequestBody) (*PostShareResponse, error) {
	rsp, err := c.PostShare(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParsePostShareResponse(rsp)
}

// GenerateTotpWithBodyWithResponse request with arbitrary body returning *GenerateTotpResponse
func (c *ClientWithResponses) GenerateTotpWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader) (*GenerateTotpResponse, error) {
	rsp, err := c.GenerateTotpWithBody(ctx, id, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseGenerateTotpResponse(rsp)
}

func (c *ClientWithResponses) GenerateTotpWithResponse(ctx context.Context, id string, body GenerateTotpJSONRequestBody) (*GenerateTotpResponse, error) {
	rsp, err := c.GenerateTotp(ctx, id, body)
	if err != nil {
		return nil, err
	}
	return ParseGenerateTotpResponse(rsp)
}

// CreateSharesWithBodyWithResponse request with arbitrary body returning *CreateSharesResponse
func (c *ClientWithResponses) CreateSharesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateSharesResponse, error) {
	rsp, err := c.CreateSharesWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSharesResponse(rsp)
}

func (c *ClientWithResponses) CreateSharesWithResponse(ctx context.Context, body CreateSharesJSONRequestBody) (*CreateSharesResponse, error) {
	rsp, err := c.CreateShares(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateSharesResponse(rsp)
}

// ParseCreateSessionResponse parses an HTTP response from a CreateSessionWithResponse call
func ParseCreateSessionResponse(rsp *http.Response) (*CreateSessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrivateSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSessionResponse parses an HTTP response from a GetSessionWithResponse call
func ParseGetSessionResponse(rsp *http.Response) (*GetSessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Session
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostShareResponse parses an HTTP response from a PostShareWithResponse call
func ParsePostShareResponse(rsp *http.Response) (*PostShareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostShareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGenerateTotpResponse parses an HTTP response from a GenerateTotpWithResponse call
func ParseGenerateTotpResponse(rsp *http.Response) (*GenerateTotpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GenerateTotpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TOTPCode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSharesResponse parses an HTTP response from a CreateSharesWithResponse call
func ParseCreateSharesResponse(rsp *http.Response) (*CreateSharesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateSharesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TOTPShares
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Start a new authentication session
	// (POST /sessions)
	CreateSession(ctx echo.Context) error

	// (GET /sessions/{id})
	GetSession(ctx echo.Context, id string) error

	// (POST /sessions/{id}/shares)
	PostShare(ctx echo.Context, id string) error

	// (POST /sessions/{id}/totp)
	GenerateTotp(ctx echo.Context, id string) error
	// Split a TOTP secret key
	// (POST /shares)
	CreateShares(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateSession converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSession(ctx)
	return err
}

// GetSession converts echo context to params.
func (w *ServerInterfaceWrapper) GetSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSession(ctx, id)
	return err
}

// PostShare converts echo context to params.
func (w *ServerInterfaceWrapper) PostShare(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostShare(ctx, id)
	return err
}

// GenerateTotp converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateTotp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateTotp(ctx, id)
	return err
}

// CreateShares converts echo context to params.
func (w *ServerInterfaceWrapper) CreateShares(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateShares(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/sessions", wrapper.CreateSession)
	router.GET("/sessions/:id", wrapper.GetSession)
	router.POST("/sessions/:id/shares", wrapper.PostShare)
	router.POST("/sessions/:id/totp", wrapper.GenerateTotp)
	router.POST("/shares", wrapper.CreateShares)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vRmwGAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
